<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
	<link rel="stylesheet" href="CSS/style.css">
	<title>Graph it - WebGL</title>
</head>

<body>
	<textarea id="functions"></textarea>

	<script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
	 crossorigin="anonymous"></script>
	<script src="JS/Math/Vector2.js"></script>
	<script src="JS/Math/Matrix3.js"></script>
	<script src="JS/Application/Application.js"></script>
	<script src="JS/Graphics/Color.js"></script>
	<script src="JS/Graphics/Canvas.js"></script>

	<script type="glsl" id="VERT_SHADER">
		attribute vec2 aPos; 
		attribute vec4 aColor; 
		
		uniform mat3 uMatrix;

		varying lowp vec4 vColor;
		
		void main(void) {
			vec2 position = (uMatrix * vec3(aPos.x, aPos.y, 1)).xy;
			gl_Position = vec4(position.xy, 0.0, 1.0); 
			vColor = aColor;
		}
	</script>

	<script type="glsl" id="FRAG_SHADER">
		varying lowp vec4 vColor;
		
		void main(void) {
			gl_FragColor = vColor;
		}
	</script>

	<script>
		$(document).ready(function () {
			let app = new Application(60, 60);
			let canvas = new Canvas('webgl', new Vector2(500, 500), null, true);
			let text = new Canvas('2d', new Vector2(500, 500), null, false);
			let functions = [];

			app.onStart = function () {
				canvas.setupShaders(document.getElementById("VERT_SHADER").textContent, document.getElementById("FRAG_SHADER").textContent);
				canvas.setBackground(new Color(0.952, 0.952, 0.952, 1));
				canvas.setMargin(new Vector2(200, 0));
				canvas.fullscreen(true);

				text.setMargin(new Vector2(200, 0));
				text.fullscreen(true);

				let minDim = Math.min((canvas.dimensions.x - canvas.margin.x), (canvas.dimensions.y - canvas.margin.y));
				let xScale = (canvas.dimensions.y - canvas.margin.y) / (minDim * 10);
				let yScale = (canvas.dimensions.x - canvas.margin.x) / (minDim * 10);

				canvas.scale = new Vector2(xScale, yScale);

				Canvas.registerKey(16, null, null);

				$('#functions').on('input', function () {
					functions = [];
					let functionStrings = $('#functions').val().split('\n');
					for (let i = 0; i < functionStrings.length; i++) {
						if (functionStrings[i].length > 0)
							functions.push(functionStrings[i].trim());
					}
				});
			};

			app.onUpdate = function () {
				let mouseDelta = Canvas.mouseDelta();
				let scrollDelta = Canvas.scrollDelta();

				if (Canvas.mouseDown) {
					canvas.position.x += (mouseDelta.x / (canvas.dimensions.x - canvas.margin.x));
					canvas.position.y -= (mouseDelta.y / (canvas.dimensions.y - canvas.margin.y));
				}

				if (Math.abs(scrollDelta.x) + Math.abs(scrollDelta.y) > 0) {
					let deltaX, deltaY;
					if (Canvas.getKeyDown(16) == true) {
						deltaX = scrollDelta.x * canvas.scale.x * canvas.scale.x * 10;
						deltaY = scrollDelta.y * canvas.scale.y * canvas.scale.y * 10;
					} else {
						deltaX = (scrollDelta.x + scrollDelta.y) * Math.min(canvas.scale.x * canvas.scale.x, canvas.scale.y * canvas.scale.y) * 10;
						deltaY = deltaX;
					}

					deltaX = Math.min(Math.max(0.01, Math.abs(deltaX)), 50) * Math.sign(deltaX);
					deltaY = Math.min(Math.max(0.01, Math.abs(deltaY)), 50) * Math.sign(deltaY);

					canvas.scale.x += (deltaX / ((canvas.dimensions.x - canvas.margin.x)));
					canvas.scale.y += (deltaY / ((canvas.dimensions.y - canvas.margin.y)));

					canvas.scale.x = Math.min(Math.max(0.0001, canvas.scale.x), 100);
					canvas.scale.y = Math.min(Math.max(0.0001, canvas.scale.y), 100);
				}

				let scale = Matrix3.scaling(canvas.scale.x, canvas.scale.y);
				let pos = Matrix3.translation(canvas.position.x, canvas.position.y);
				let matrix = Matrix3.multiply(pos, scale);

				let centerX = matrix[6] / matrix[0];
				let centerY = matrix[7] / matrix[4];

				let oneScaledX = 1 / matrix[0];
				let oneScaledY = 1 / matrix[4];

				if (functions.length > 0) {
					for (let i = 0; i < functions.length; i++) {
						if (functions[i][0] == 'x') { // X

						} else if (functions[i][0] == 'y') { // Y

						} else if (functions[i][0] == '(') { // Point

						}
					}
				}

				text.position = canvas.position;
				text.scale = canvas.scale;

				canvas.renderLineX(-centerX - oneScaledX, -centerX + oneScaledX, 1000, function (x) {
					return Math.sin(x);
				}, new Color(1, 0, 0, 1));
				canvas.flush();

				canvas.renderLineX(-centerX - oneScaledX, -centerX + oneScaledX, 1, function (x) {
					return 0;
				}, new Color(0, 0, 0, 1));
				canvas.flush(true);

				canvas.renderLineY(-centerY - oneScaledY, -centerY + oneScaledY, 1, function (y) {
					return 0;
				}, new Color(0, 0, 0, 1));
				canvas.flush(true);

				let min = Math.min(oneScaledX, oneScaledY);
				let size = 100;
				while (size > min * 0.2) {
					size *= 0.1;
				}

				canvas.renderGridX(Math.round((-centerX)), -centerY - oneScaledY, -centerY + oneScaledY, size, oneScaledX);
				canvas.flush(true);

				canvas.renderGridY(Math.round((-centerY)), -centerX - oneScaledX, -centerX + oneScaledX, size, oneScaledY);
				canvas.flush(true);

				text.renderTextX(Math.round((-centerX)), -centerY - oneScaledY, -centerY + oneScaledY, size, oneScaledX);
				text.flush2d();
			}

			app.start();
		});
	</script>
</body>

</html>