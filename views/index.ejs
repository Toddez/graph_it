<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
	<link rel="stylesheet" href="CSS/style.css">
	<title>Graph it!</title>
	<script src="https://code.jquery.com/jquery-3.3.1.js"
		integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
	<script src="JS/Math/Vector2.js"></script>
	<script src="JS/Math/Matrix3.js"></script>
	<script src="JS/Application/Application.js"></script>
	<script src="JS/Graphics/Color.js"></script>
	<script src="JS/Graphics/Canvas.js"></script>
	<script src="JS/Graphics/Graph.js"></script>
</head>

<body>
	<textarea id="functions">y = PI
y = e</textarea>

	<textarea id="variables">float PI = 3.14159265359
float e = 2.71828</textarea>

	<div id="info">Examples of functions:
		<ul>
			<li>y = 1.0</li>
			<li>x = 1.0</li>
			<li>(1.0, 1.0)</li>
		</ul>
		Examples of constants:
		<ul>
			<li>float PI = 3.14159265359</li>
			<li>float halfPI = PI / 2.0</li>
			<li>float e = 2.71828</li>
		</ul>
		Input functions in the area above using the following format for lines: y=value, x=value and the following for
		points: (value, value)<br><br>Numbers are not allowed to be inputted as integers(1, 2, 3, ...), instead they
		have to be inputted as floats(1.0, 2.0, 3.0, ...)<br><br>You have access to functions like: sin, cos, tan, etc as well
		as types like int, float, vec2, vec3, vec4, mat3, mat4, etc<br><br>You can also create your own constants above
		using the following format: type name = value, the constants will be defined in the order they are written<br><br>You also have access to t, which starts at 0 when page
		is loaded and goes up over time<br><br>You can move around the graph using left click and zoom in/out using the
		mousewheel
	</div>

	<script>
		$(document).ready(function () {
			let app = new Application(10, 10);
			let canvas = new Canvas('webgl', new Vector2(500, 500), null, true);
			let text = new Canvas('2d', new Vector2(500, 500), null, false);
			let graph = new Graph(canvas, text);

			let time = 0;
			let lastInput = 0;
			let inputChanged = false;

			function map(v, a, b, c, d) {
				if (v == a)
					return c;
				if (v == b)
					return d;

				return c + ((v - a) / (b - a)) * d;
			}

			function checkInput() {
				var functionStrings = $('#functions').val().split('\n');
				graph.setFunctions(functionStrings);

				var variableStrings = $('#variables').val().split('\n');
				graph.setVariables(variableStrings);
			}

			app.onStart = function () {
				canvas.setBackground(new Color(0.1, 0.1, 0.11, 1));
				canvas.setMargin(new Vector2(400, 0));
				canvas.fullscreen(true);

				text.setMargin(new Vector2(400, 0));
				text.fullscreen(true);

				let minDim = Math.min((canvas.dimensions.x - canvas.margin.x), (canvas.dimensions.y - canvas.margin.y));
				let xScale = (canvas.dimensions.y - canvas.margin.y) / (minDim * 5);
				let yScale = (canvas.dimensions.x - canvas.margin.x) / (minDim * 5);

				canvas.scale = new Vector2(xScale, yScale);

				$('#functions, #variables').on('input', function () {
					inputChanged = true;
					lastInput = time;
				});
				$('#functions, #variables').ready(checkInput);
			};

			app.onUpdate = function () {
				if (inputChanged == true && time - lastInput >= 0.15) {
					checkInput();
					inputChanged = false;
				}

				let mouseDelta = Canvas.mouseDelta();
				let scrollDelta = Canvas.scrollDelta();

				if (Canvas.mouseDown) {
					canvas.position.x += ((mouseDelta.x * 2) / (canvas.dimensions.x - canvas.margin.x) * (1 / canvas.scale.x));
					canvas.position.y -= ((mouseDelta.y * 2) / (canvas.dimensions.y - canvas.margin.y) * (1 / canvas.scale.y));
				}

				let mouseRealX = map(Canvas.mousePos.x * 2, 0, canvas.dimensions.x - canvas.margin.x, -1, 1) * (1 / canvas.scale.x);
				let mouseRealY = map(Canvas.mousePos.y * 2, 0, canvas.dimensions.y - canvas.margin.y, -1, 1) * (1 / canvas.scale.y);

				let mousePosX = (canvas.position.x - mouseRealX);
				let mousePosY = (canvas.position.y - mouseRealY);

				if (Math.abs(scrollDelta.x) + Math.abs(scrollDelta.y) > 0) {
					let delta = (scrollDelta.x + scrollDelta.y);

					delta = 10 / ((Math.min(Math.max(0.01, Math.abs(delta)), 1) * Math.sign(delta)) / canvas.scale.x);

					let xDiff = (delta / ((canvas.dimensions.x - canvas.margin.x)));
					let yDiff = (delta / ((canvas.dimensions.y - canvas.margin.y)));

					canvas.scale.x -= Math.min(xDiff * 8, canvas.scale.x * 0.9);
					canvas.scale.y -= Math.min(yDiff * 8, canvas.scale.y * 0.9);

					let ratio = (canvas.dimensions.x - canvas.margin.x) / (canvas.dimensions.y - canvas.margin.y);
					canvas.scale.x = Math.min(Math.max(0.000001 / ratio, canvas.scale.x), 1000000 / ratio);
					canvas.scale.y = Math.min(Math.max(0.000001, canvas.scale.y), 1000000);

					mouseRealX = map(Canvas.mousePos.x * 2, 0, canvas.dimensions.x - canvas.margin.x, -1, 1) * (1 / canvas.scale.x);
					mouseRealY = map(Canvas.mousePos.y * 2, 0, canvas.dimensions.y - canvas.margin.y, -1, 1) * (1 / canvas.scale.y);

					let mousePosXNew = (canvas.position.x - mouseRealX);
					let mousePosYNew = (canvas.position.y - mouseRealY);

					let deltaMousePosX = mousePosX - mousePosXNew;
					let deltaMousePosY = mousePosYNew - mousePosY;

					canvas.position.x += deltaMousePosX;
					canvas.position.y += deltaMousePosY;
				}

				graph.time = time;
				graph.render();

				time += 1 / app.ups;
			}

			app.start();
		});
	</script>
</body>

</html>