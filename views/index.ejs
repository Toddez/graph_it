<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
	<link rel="stylesheet" href="CSS/style.css">
	<title>Graph it - WebGL</title>
</head>

<body>
	<div id="functions">
		<div id="newFunction">+</div>
	</div>

	<script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
	 crossorigin="anonymous"></script>
	<script src="JS/Math/Vector2.js"></script>
	<script src="JS/Math/Matrix3.js"></script>
	<script src="JS/Application/Application.js"></script>
	<script src="JS/Graphics/Color.js"></script>
	<script src="JS/Graphics/Canvas.js"></script>

	<script type="glsl" id="VERT_SHADER">
		attribute vec2 aPos; 
		attribute vec4 aColor; 
		
		uniform mat3 uMatrix;

		varying lowp vec4 vColor;
		
		void main(void) {
			vec2 position = (uMatrix * vec3(aPos.x, aPos.y, 1)).xy;
			gl_Position = vec4(position.xy, 0.0, 1.0); 
			vColor = aColor;
		}
	</script>

	<script type="glsl" id="FRAG_SHADER">
		varying lowp vec4 vColor;
		
		void main(void) {
			gl_FragColor = vColor;
		}
	</script>

	<script>
		$(document).ready(function () {
			$('.removeFunction').on('click', function () {

			});

			$('#newFunction').on('click', function () {
				$('#functions').append($('<div class="function"><textarea class="xFunction">x =</textarea><textarea class="yFunction">y =</textarea><div class="removeFunction">-</div></div>)'));
			});

			let app = new Application(60, 60);
			let canvas = new Canvas('test_canvas', new Vector2(500, 500));

			app.onStart = function () {
				canvas.fullscreen(true);
				canvas.setupShaders(document.getElementById("VERT_SHADER").textContent, document.getElementById("FRAG_SHADER").textContent);
				canvas.setBackground(new Color(0.952, 0.952, 0.952, 1));
				canvas.setMargin(new Vector2(200, 0));
			};

			app.onUpdate = function () {
				let mouseDelta = canvas.mouseDelta();
				let scrollDelta = canvas.scrollDelta();

				if (canvas.mouseDown) {
					canvas.position.x += (mouseDelta.x / canvas.dimensions.x) * 2;
					canvas.position.y -= (mouseDelta.y / canvas.dimensions.y) * 2;
				}

				if (Math.abs(scrollDelta.x) + Math.abs(scrollDelta.y) > 0) {

					canvas.scale.x += (scrollDelta.x / 2000) / ((canvas.dimensions.x - canvas.margin.x) / (canvas.dimensions.y - canvas.margin.y)) / Math.max(Math.min((1 / canvas.scale.x) * (1 / canvas.scale.x) * 0.5, 100), 1);
					canvas.scale.y += (scrollDelta.y / 2000) / ((canvas.dimensions.y - canvas.margin.y) / (canvas.dimensions.x - canvas.margin.x)) / Math.max(Math.min((1 / canvas.scale.y) * (1 / canvas.scale.y) * 0.5, 100), 1);

					canvas.scale.x = Math.min(Math.max(0.01, canvas.scale.x), 10000);
					canvas.scale.y = Math.min(Math.max(0.01, canvas.scale.y), 10000);
				}

				let scale = Matrix3.scaling(canvas.scale.x, canvas.scale.y);
				let pos = Matrix3.translation(canvas.position.x, canvas.position.y);
				let matrix = Matrix3.multiply(pos, scale);

				let centerX = matrix[6] / matrix[0];
				let centerY = matrix[7] / matrix[4];

				let oneScaledX = 1 / matrix[0];
				let oneScaledY = 1 / matrix[4];

				canvas.renderLineX(-centerX - oneScaledX, -centerX + oneScaledX, 25000);
				canvas.flush();

				canvas.renderGridX(Math.round((-centerX)), -centerY - oneScaledY, -centerY + oneScaledY, 1, oneScaledX);
				canvas.flush(true);

				canvas.renderGridY(Math.round((-centerY)), -centerX - oneScaledX, -centerX + oneScaledX, 1, oneScaledY);
				canvas.flush(true);
			}

			app.start();
		});
	</script>
</body>

</html>